package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"strconv"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function
	wordCount := calculateWordCount(document, value)
	if len(wordCount) == 0 {
		return
	}

	res = make([]mapreduce.KeyValue, 0)
	for key, value := range wordCount {
		res = append(res, mapreduce.KeyValue{key, strconv.FormatUint(value, 10)})
	}

	return
}

func calculateWordCount(fileName string, content string) map[string]uint64 {
	var wordCount map[string]uint64

	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	words := strings.FieldsFunc(content, f)
	if len(words) == 0 {
		fmt.Printf("file %s does not have valid content", fileName)
		return wordCount
	}

	wordCount = make(map[string]uint64)
	for _, w := range words {
		count, ok := wordCount[w]
		if ok {
			wordCount[w] = count + 1
		} else {
			wordCount[w] = 1
		}
	}
	return wordCount
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	var count uint64
	var tmp uint64
	var err error
	for _, v := range values {
		tmp, err = strconv.ParseUint(v, 10, 64)
		if err != nil {
			fmt.Printf("key %s, convert string %s to uint64 failed: %q\n", key, v, err)
			return ""
		}
		count += tmp
	}
	return strconv.FormatUint(count, 10)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
